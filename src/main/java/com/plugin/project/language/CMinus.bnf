{
parserClass = "com.plugin.project.language.parser.CMinusParser"

extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

tokens =
[
    COMMENT = 'regexp:(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|(//.*)'
    ID = 'regexp: [a-zA-Z]([a-zA-Z]|[0-9])*'
    NUM = 'regexp:\d+'
    WHITE_SPACE = 'regexp:\s+'

    //keywords
    ELSE = "else"
    IF = "if"
    INT = "int"
    RETURN = "return"
    VOID = "void"
    WHILE = "while"
    ASSIGN = "="
    ADD = "+"
    SUBSTRACT = "-"
    MULTIPLY = "*"
    DIVIDE = "/"
    SMALLER = "<"
    SMALLER_OR_EQUAL = "<="
    GREATER = ">"
    GREATER_OR_EQUAL = ">="
    EQUAL = "=="
    NOT_EQUAL = "!="
    END_OF_INSTRUCTION = ";"
    COMMA = ","
    LEFT_PARANTHESIS = "("
    RIGHT_PARANTHESIS = ")"
    LEFT_BRACKET = "["
    RIGHT_BRACKET = "]"
    LEFT_BRACE = "{"
    RIGHT_BRACE = "}"
]

psiClassPrefix = "CMinus"
psiImplClassSuffix = "Impl"
psiPackage = "com.plugin.project.language.psi"
psiImplPackage = "com.plugin.project.language.psi.impl"

elementTypeHolderClass = "com.plugin.project.language.psi.CMinusTypes"
elementTypeClass = "com.plugin.project.language.psi.CMinusElementType"
tokenTypeClass = "com.plugin.project.language.psi.CMinusTokenType"
}

CMinusFile ::= program*

program ::= declaration_list | COMMENT | CRLF

declaration_list ::= declaration_list1

declaration_list1 ::= declaration declaration_list1 | declaration

declaration ::= var_declaration | fun_declaration

var_declaration ::= type_specifier ID END_OF_INSTRUCTION | type_specifier ID LEFT_BRACKET NUM RIGHT_BRACKET END_OF_INSTRUCTION

type_specifier ::= INT | VOID

fun_declaration ::= type_specifier ID LEFT_PARANTHESIS params RIGHT_PARANTHESIS compound_stmt

params ::= param_list | VOID

param_list ::= param_list1

param_list1 ::= param COMMA param_list1 | param

param ::= type_specifier ID | type_specifier ID LEFT_BRACKET RIGHT_BRACKET

compound_stmt ::= LEFT_BRACE local_declarations statement_list RIGHT_BRACE

local_declarations ::= local_declarations1

local_declarations1 ::= var_declaration local_declarations1 | /*epsilon*/

statement_list ::= statement_list1

statement_list1 ::= statement statement_list1 | /*epsilon*/

statement ::= expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt

expression_stmt ::= expression END_OF_INSTRUCTION | END_OF_INSTRUCTION

selection_stmt ::= IF LEFT_PARANTHESIS expression RIGHT_PARANTHESIS statement ELSE statement | IF LEFT_PARANTHESIS expression RIGHT_PARANTHESIS statement

iteration_stmt ::= WHILE LEFT_PARANTHESIS expression RIGHT_PARANTHESIS statement

return_stmt ::= RETURN END_OF_INSTRUCTION | RETURN expression END_OF_INSTRUCTION

expression ::= var ASSIGN expression | simple_expression

var ::= ID | ID LEFT_BRACKET expression RIGHT_BRACKET

simple_expression ::= additive_expression rel_operations additive_expression | additive_expression

rel_operations ::= SMALLER_OR_EQUAL | SMALLER | GREATER | GREATER_OR_EQUAL | EQUAL | NOT_EQUAL

additive_expression ::= additive_expression1

additive_expression1 ::= term add_operation additive_expression1 | term

add_operation ::= ADD | SUBSTRACT

term ::= term1

term1 ::= factor mul_operation term1 | factor

mul_operation ::= MULTIPLY | DIVIDE

factor ::= LEFT_PARANTHESIS expression RIGHT_PARANTHESIS | var | call | NUM

call ::= ID LEFT_PARANTHESIS args RIGHT_PARANTHESIS

args ::= arg_list | /*epsilon*/

arg_list ::= arg_list1

arg_list1 ::= expression COMMA arg_list1 | expression