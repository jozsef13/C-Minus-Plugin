/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.plugin.project.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.plugin.project.language.psi.CMinusTypes;
import com.intellij.psi.TokenType;
import static com.plugin.project.language.psi.CMinusTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>CMinus.flex</tt>
 */
class CMinusLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15728 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
    "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
    "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\7\1\21\3\7\1\21\71\7\1\22\1\7\1\23\1\0\1\24\1\25\2\0\16"+
    "\7\1\26\1\27\1\30\1\31\2\7\1\32\11\7\1\33\21\7\1\32\25\7\1\6\3\7\1\21\1\34"+
    "\1\6\4\7\1\0\1\6\4\7\1\33\1\35\1\0\3\7\2\36\3\0\1\7\1\36\10\7\1\4\1\37\14"+
    "\7\1\40\1\41\1\7\1\42\1\4\1\43\2\0\7\7\1\44\14\7\1\23\1\0\1\4\1\45\4\7\1\46"+
    "\1\17\5\7\1\46\2\0\3\7\1\47\10\0\2\7\1\26\1\46\2\0\1\50\1\7\1\32\17\7\1\51"+
    "\1\4\1\6\1\7\1\40\1\41\1\52\2\7\1\42\1\53\1\54\1\41\1\55\1\56\1\57\1\51\1"+
    "\4\1\23\1\0\1\60\1\61\1\52\2\7\1\42\1\62\1\63\1\61\1\64\1\34\1\65\1\66\1\4"+
    "\1\46\1\0\1\60\1\33\1\32\2\7\1\42\1\67\1\54\1\33\1\70\1\71\1\0\1\51\1\4\1"+
    "\0\1\34\1\60\1\41\1\52\2\7\1\42\1\67\1\54\1\41\1\64\1\72\1\57\1\51\1\4\1\34"+
    "\1\0\1\73\1\74\1\75\1\76\1\77\1\74\1\7\1\22\1\74\1\75\1\100\1\0\1\66\1\4\2"+
    "\0\1\40\1\26\1\42\2\7\1\42\1\7\1\101\1\26\1\75\1\102\1\36\1\51\1\4\2\0\1\40"+
    "\1\26\1\42\2\7\1\42\1\40\1\54\1\26\1\75\1\102\1\30\1\51\1\4\1\103\1\0\1\60"+
    "\1\26\1\42\4\7\1\44\1\26\1\104\1\50\1\56\1\51\1\4\1\0\1\105\1\73\1\7\1\21"+
    "\1\105\2\7\1\32\1\106\1\21\1\107\1\110\1\7\1\66\1\4\1\111\1\0\1\6\6\7\1\36"+
    "\1\7\1\21\1\4\1\112\4\0\1\113\1\114\1\50\1\6\1\115\1\73\1\7\1\70\1\110\1\46"+
    "\1\4\1\116\4\0\1\71\2\0\1\23\1\4\1\112\1\117\1\120\1\7\1\6\3\7\1\24\1\6\1"+
    "\7\1\26\2\7\1\6\3\7\1\24\1\30\7\0\10\7\1\4\1\112\10\7\1\4\1\121\4\7\1\33\1"+
    "\20\5\7\1\122\51\7\1\75\1\21\1\75\5\7\1\75\4\7\1\75\1\21\1\75\1\7\1\21\7\7"+
    "\1\75\10\7\1\44\4\0\2\7\2\0\12\7\2\46\1\6\114\7\1\41\2\7\1\123\2\7\1\36\11"+
    "\7\1\74\1\7\1\71\1\7\1\26\1\24\1\0\2\7\1\24\1\0\2\7\1\47\1\0\1\7\1\26\1\124"+
    "\1\0\12\7\1\125\1\126\1\4\1\112\3\0\1\127\1\4\1\112\13\7\1\0\5\7\1\36\10\7"+
    "\1\46\1\0\3\7\1\21\1\7\1\47\1\7\1\47\1\66\1\4\3\7\1\46\1\24\1\0\5\7\1\47\3"+
    "\7\1\23\1\4\1\112\4\0\3\7\1\47\7\7\1\21\3\7\1\41\1\4\1\112\1\4\1\112\1\56"+
    "\1\0\1\7\1\21\10\0\11\7\1\47\1\4\1\112\1\0\1\130\1\47\1\0\6\7\1\4\1\45\6\7"+
    "\1\47\1\0\7\7\1\0\1\4\1\131\1\4\1\45\3\7\1\46\1\7\1\71\10\0\1\122\3\7\1\21"+
    "\1\23\36\7\1\46\1\130\42\7\2\46\4\7\2\46\1\7\1\132\3\7\1\46\6\7\1\26\1\110"+
    "\1\133\1\24\1\134\1\47\1\7\1\24\1\133\1\24\1\135\1\136\3\0\1\137\1\0\1\56"+
    "\1\71\1\0\1\140\1\141\2\0\1\34\1\56\2\0\1\7\1\24\6\0\4\7\1\71\1\0\1\107\1"+
    "\105\1\106\1\142\1\25\1\143\1\7\1\54\1\144\1\145\2\0\5\7\1\71\144\0\1\72\6"+
    "\7\1\23\42\0\5\7\1\21\5\7\1\21\20\7\1\24\1\130\1\47\1\0\4\7\1\33\1\20\7\7"+
    "\1\56\1\0\1\56\2\7\1\21\1\0\10\21\4\7\5\0\1\56\72\0\1\146\3\0\1\6\1\7\1\142"+
    "\1\24\1\6\11\7\1\21\1\147\1\6\12\7\1\122\1\144\4\7\1\46\1\6\12\7\1\21\2\0"+
    "\3\7\1\36\6\0\170\7\1\46\11\0\72\7\1\46\5\0\21\7\1\24\10\0\5\7\1\46\41\7\1"+
    "\24\2\7\1\4\1\150\2\0\6\7\1\122\1\33\16\7\1\23\3\0\1\56\1\7\1\105\14\7\1\52"+
    "\3\7\1\21\1\7\7\0\1\56\6\7\3\0\6\7\1\47\1\0\10\7\1\46\1\0\1\4\1\112\3\7\1"+
    "\151\1\4\1\45\3\7\1\46\4\7\1\47\1\0\3\7\1\24\10\7\1\71\1\56\1\4\1\112\2\7"+
    "\1\4\1\152\6\7\1\21\1\0\1\7\1\46\1\4\1\112\2\7\1\21\1\105\10\7\1\36\2\0\1"+
    "\127\2\7\1\153\1\0\3\154\1\0\2\21\5\7\1\122\1\46\1\0\17\7\1\155\1\4\1\112"+
    "\64\7\1\47\1\0\2\7\1\21\1\130\5\7\1\47\40\0\55\7\1\46\15\7\1\23\4\0\1\21\1"+
    "\0\1\130\1\144\1\7\1\42\1\21\1\110\1\156\15\7\1\23\3\0\1\130\54\7\1\46\2\0"+
    "\10\7\1\105\6\7\5\0\1\7\1\47\2\7\2\0\2\7\1\77\2\0\1\144\4\0\1\26\20\7\1\24"+
    "\2\0\1\4\1\112\1\6\2\7\1\61\1\6\2\7\1\36\1\72\12\7\1\21\3\105\1\157\4\0\1"+
    "\7\1\40\2\7\1\21\2\7\1\160\1\7\1\46\1\7\1\46\4\0\17\7\1\36\10\0\6\7\1\24\20"+
    "\0\1\20\20\0\3\7\1\24\6\7\1\71\1\0\1\71\3\0\4\7\2\0\3\7\1\36\5\7\1\36\3\7"+
    "\1\46\4\7\1\47\1\7\1\142\5\0\23\7\1\46\1\4\1\112\4\7\1\47\4\7\1\47\5\7\1\0"+
    "\6\7\1\47\23\0\46\7\1\21\1\0\2\7\1\46\1\0\1\7\23\0\1\46\1\42\4\7\1\33\1\161"+
    "\2\7\1\46\1\0\2\7\1\21\1\0\3\7\1\21\10\0\2\7\1\155\1\0\2\7\1\46\1\0\3\7\1"+
    "\23\10\0\7\7\1\72\10\0\1\162\1\50\1\40\1\6\2\7\1\47\1\61\4\0\3\7\1\24\3\7"+
    "\1\24\4\0\1\7\1\6\2\7\1\21\3\0\6\7\1\46\1\0\2\7\1\46\1\0\2\7\1\36\1\0\2\7"+
    "\1\23\15\0\11\7\1\71\6\0\6\7\1\36\1\0\6\7\1\36\41\0\10\7\1\21\3\0\1\66\1\4"+
    "\1\0\1\56\7\7\1\36\2\0\3\7\1\71\1\4\1\112\6\7\1\163\1\4\2\0\4\7\1\164\1\0"+
    "\10\7\1\24\1\157\1\4\1\165\4\0\2\7\1\32\4\7\1\30\10\0\1\21\1\143\1\7\1\33"+
    "\1\7\1\71\7\7\1\36\1\4\1\112\1\40\1\41\1\52\2\7\1\42\1\67\1\54\1\41\1\64\1"+
    "\100\1\144\1\134\2\24\21\0\11\7\1\36\1\4\1\112\4\0\10\7\1\33\1\0\1\4\1\112"+
    "\24\0\6\7\1\46\1\7\1\71\2\0\1\46\4\0\10\7\1\166\1\0\1\4\1\112\4\0\7\7\1\0"+
    "\1\4\1\112\6\0\3\7\1\101\1\7\1\47\1\4\1\112\54\0\10\7\1\4\1\112\1\0\1\56\70"+
    "\0\7\7\1\71\40\0\1\7\1\42\4\7\1\21\1\7\1\71\1\0\1\4\1\112\2\0\1\105\3\7\1"+
    "\105\2\7\1\6\1\21\51\0\63\7\1\23\14\0\15\7\1\21\2\0\30\7\1\47\27\0\5\7\1\21"+
    "\72\0\10\7\1\21\67\0\7\7\1\71\3\7\1\21\1\4\1\112\14\0\3\7\1\46\1\24\1\0\6"+
    "\7\1\21\1\0\1\47\1\0\1\4\1\112\1\130\2\7\1\144\2\7\56\0\10\7\1\24\1\0\5\7"+
    "\1\21\1\0\1\56\2\7\10\0\1\71\3\0\75\7\1\24\2\0\36\7\1\36\41\0\1\23\77\0\15"+
    "\7\1\36\1\7\1\24\1\7\1\71\1\7\1\167\130\0\1\144\1\101\1\36\1\130\1\44\1\47"+
    "\3\0\1\170\22\0\1\157\67\0\12\7\1\26\10\7\1\26\1\171\1\172\1\7\1\173\1\40"+
    "\7\7\1\33\1\44\2\26\3\7\1\174\1\110\1\105\1\42\51\7\1\46\3\7\1\42\2\7\1\122"+
    "\3\7\1\122\2\7\1\26\3\7\1\26\2\7\1\21\3\7\1\21\3\7\1\42\3\7\1\42\2\7\1\122"+
    "\1\51\6\4\6\7\1\21\1\130\5\7\1\24\1\20\1\0\1\140\2\0\1\130\1\6\1\7\52\0\1"+
    "\21\2\7\1\52\1\156\1\36\72\0\30\7\1\24\1\0\1\21\5\0\11\7\1\36\1\4\1\112\24"+
    "\0\1\40\3\7\1\113\1\6\1\122\1\175\1\107\1\176\1\113\1\132\1\113\2\122\1\65"+
    "\1\7\1\32\1\7\1\47\1\60\1\32\1\7\1\47\116\0\3\7\1\23\3\7\1\23\3\7\1\23\16"+
    "\0\32\7\1\21\5\0\106\7\1\24\1\0\33\7\1\46\120\7\1\23\53\0\3\7\1\46\134\0\36"+
    "\7\2\0");

  /* The ZZ_CMAP_A table has 1016 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\2\0\1\2\1\40\1\7\3\0\1\36\1\0\1\45\1\46\1\4\1\41\1\44\1\42\1"+
    "\0\1\3\12\5\1\0\1\43\1\33\1\37\1\34\2\0\22\6\1\47\1\10\1\50\1\0\1\6\1\0\1"+
    "\27\1\30\1\32\1\24\1\11\1\15\1\31\1\26\1\14\2\6\1\12\1\6\1\16\1\23\2\6\1\20"+
    "\1\13\1\17\1\21\1\22\1\25\3\6\1\51\1\35\1\52\7\0\1\1\2\0\1\2\11\0\1\6\12\0"+
    "\1\6\2\0\7\6\1\0\2\6\4\0\4\6\6\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\2\0\4"+
    "\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\1\6\1\0\1\6\7\0\2"+
    "\6\1\0\2\6\1\0\4\6\5\0\2\5\4\0\6\6\1\0\10\6\2\0\2\6\1\0\6\6\2\5\3\6\2\0\4"+
    "\6\2\0\3\6\2\5\14\6\2\0\4\6\10\0\10\6\2\0\2\5\1\6\2\0\6\6\1\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\4\6\10\0\1\6\4\0\2\6\1\0\1\6\1\0\3\6\1\0\6\6\4\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\6\1\0\3\6\2\0\3\6\3\0\4\6\1\0\1\6\7\0\2\5\1\6\1\0\2"+
    "\6\1\0\5\6\1\0\3\6\2\0\1\6\15\0\2\6\2\0\2\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2"+
    "\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\1\6\6\0\3\6\3\0\3\6\5\0\2\6\2\0\2\6\5\0\1\6"+
    "\1\0\5\6\3\0\12\6\1\0\1\6\4\0\1\6\4\0\6\6\1\0\1\6\3\0\2\6\4\0\2\5\7\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\3\0\3\6\1\0\1\6\1\0\1\6\2\5\2\0\4\6\5\0\1"+
    "\6\1\0\1\6\1\0\1\6\4\0\2\6\2\5\4\6\2\0\3\6\1\0\4\6\1\2\10\6\1\0\2\6\4\0\4"+
    "\6\3\0\1\6\4\0\2\6\5\0\3\6\5\0\5\6\2\5\3\0\3\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\2\0\3\6\1\0\6\6\2\0\2\6\13\2\5\0\2\1\5\0\1\2\4\0\1\6\12\0\1\2\1\0\5\6"+
    "\2\0\1\6\1\0\4\6\1\0\1\6\5\0\5\6\4\0\1\6\1\0\1\2\4\0\3\6\1\0\2\6\2\0\3\6\2"+
    "\5\2\6\7\0\1\6\1\0\1\6\2\0\2\5\5\6\3\0\5\6\2\0\6\6\1\0\3\6\1\0\2\6\2\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\3\6\3\0\3\6\1\0\2\6\1\0\2\6\3\0\1\6\2\0\5\6\1\0\2\6\1"+
    "\0\5\6\1\0\2\5\4\6\2\0\1\6\1\0\2\5\1\6\1\0\1\6\3\0\1\6\3\0\1\6\3\0\2\6\3\0"+
    "\2\6\3\0\4\6\4\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\5\6\1\0\4\6\2\0\1"+
    "\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\0\12\5"+
    "\1\6\1\7\2\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\24"+
    "\1\2\1\25\1\0\1\26\1\0\2\5\1\27\11\5"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\0\2\5\1\40\6\5\1\41\2\5\1\25\1\42"+
    "\2\5\1\43\1\5\1\44\1\5\1\45\1\5\1\46"+
    "\1\5\1\47\1\5\1\50\1\51\1\52\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\254\0\254\0\254\0\254\0\254\0\254\0\254\0\254"+
    "\0\254\0\254\0\126\0\u0408\0\254\0\u0433\0\u045e\0\254"+
    "\0\u0489\0\u04b4\0\u04df\0\u0102\0\u050a\0\u0535\0\u0560\0\u058b"+
    "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\254\0\254\0\254"+
    "\0\254\0\254\0\254\0\254\0\254\0\u068d\0\u06b8\0\u06e3"+
    "\0\u0102\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0102"+
    "\0\u0810\0\u083b\0\254\0\u0102\0\u0866\0\u0891\0\u0102\0\u08bc"+
    "\0\u0102\0\u08e7\0\u0102\0\u0912\0\u0102\0\u093d\0\u0102\0\u0968"+
    "\0\u0102\0\u0102\0\u0102\0\u0102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\3\1\4\1\5\1\6\1\7\1\10\1\0"+
    "\1\11\1\7\1\12\1\13\1\14\1\7\1\15\1\16"+
    "\1\7\1\17\2\7\1\20\2\7\1\21\1\7\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\0\1\43\1\44\1\45\1\5\1\6\1\7\1\10"+
    "\1\0\1\11\1\7\1\12\1\13\1\14\1\7\1\15"+
    "\1\16\1\7\1\17\2\7\1\20\2\7\1\21\1\7"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\0\2\3\53\0\1\46\1\47\126\0\1\6"+
    "\1\7\2\0\22\7\25\0\2\7\2\0\22\7\20\0"+
    "\7\10\1\50\1\51\42\10\5\0\2\7\2\0\1\7"+
    "\1\52\20\7\25\0\2\7\2\0\6\7\1\53\13\7"+
    "\25\0\2\7\2\0\4\7\1\54\1\55\14\7\25\0"+
    "\2\7\2\0\16\7\1\56\3\7\25\0\2\7\2\0"+
    "\7\7\1\57\12\7\25\0\2\7\2\0\1\60\21\7"+
    "\25\0\2\7\2\0\12\7\1\61\7\7\25\0\2\7"+
    "\2\0\15\7\1\62\4\7\25\0\2\7\2\0\12\7"+
    "\1\63\7\7\25\0\2\7\2\0\3\7\1\64\6\7"+
    "\1\65\7\7\53\0\1\66\3\0\1\67\47\0\1\70"+
    "\2\0\1\71\50\0\1\72\53\0\1\73\53\0\1\74"+
    "\52\0\1\75\14\0\2\44\50\0\1\46\1\0\51\46"+
    "\4\47\1\76\46\47\1\10\1\0\51\10\5\0\2\7"+
    "\2\0\2\7\1\77\17\7\25\0\2\7\2\0\7\7"+
    "\1\100\12\7\25\0\2\7\2\0\6\7\1\101\13\7"+
    "\25\0\2\7\2\0\1\7\1\102\20\7\25\0\2\7"+
    "\2\0\10\7\1\103\11\7\25\0\2\7\2\0\6\7"+
    "\1\104\13\7\25\0\2\7\2\0\3\7\1\105\16\7"+
    "\25\0\2\7\2\0\3\7\1\106\16\7\25\0\2\7"+
    "\2\0\12\7\1\107\7\7\25\0\2\7\2\0\5\7"+
    "\1\110\14\7\25\0\2\7\2\0\5\7\1\111\2\7"+
    "\1\112\11\7\20\0\3\47\1\113\1\76\46\47\5\0"+
    "\2\7\2\0\1\114\21\7\25\0\2\7\2\0\3\7"+
    "\1\115\16\7\25\0\2\7\2\0\2\7\1\116\17\7"+
    "\25\0\2\7\2\0\1\117\21\7\25\0\2\7\2\0"+
    "\10\7\1\120\11\7\25\0\2\7\2\0\13\7\1\121"+
    "\6\7\25\0\2\7\2\0\1\7\1\122\20\7\25\0"+
    "\2\7\2\0\1\7\1\123\20\7\25\0\2\7\2\0"+
    "\2\7\1\124\17\7\25\0\2\7\2\0\6\7\1\125"+
    "\13\7\25\0\2\7\2\0\5\7\1\126\14\7\25\0"+
    "\2\7\2\0\1\127\21\7\25\0\2\7\2\0\7\7"+
    "\1\130\12\7\25\0\2\7\2\0\1\131\21\7\25\0"+
    "\2\7\2\0\6\7\1\132\13\7\25\0\2\7\2\0"+
    "\20\7\1\133\1\7\25\0\2\7\2\0\5\7\1\134"+
    "\14\7\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2451];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\2\1\1\0\14\1\2\0\2\1"+
    "\12\11\2\1\1\11\1\1\1\0\1\11\1\0\14\1"+
    "\10\11\1\0\14\1\1\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CMinusLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 44: break;
          case 2: 
            { return DIVIDE;
            } 
            // fall through
          case 45: break;
          case 3: 
            { return MULTIPLY;
            } 
            // fall through
          case 46: break;
          case 4: 
            { return NUM;
            } 
            // fall through
          case 47: break;
          case 5: 
            { return ID;
            } 
            // fall through
          case 48: break;
          case 6: 
            { return SMALLER;
            } 
            // fall through
          case 49: break;
          case 7: 
            { return GREATER;
            } 
            // fall through
          case 50: break;
          case 8: 
            { return ASSIGN;
            } 
            // fall through
          case 51: break;
          case 9: 
            { return NOT;
            } 
            // fall through
          case 52: break;
          case 10: 
            { return ADD;
            } 
            // fall through
          case 53: break;
          case 11: 
            { return SUBSTRACT;
            } 
            // fall through
          case 54: break;
          case 12: 
            { return END_OF_INSTRUCTION;
            } 
            // fall through
          case 55: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 56: break;
          case 14: 
            { return LEFT_PARANTHESIS;
            } 
            // fall through
          case 57: break;
          case 15: 
            { return RIGHT_PARANTHESIS;
            } 
            // fall through
          case 58: break;
          case 16: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 59: break;
          case 17: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 60: break;
          case 18: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 61: break;
          case 19: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 62: break;
          case 20: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 21: 
            { yybegin(YYINITIAL); return CMinusTypes.COMMENT;
            } 
            // fall through
          case 64: break;
          case 22: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 65: break;
          case 23: 
            { return IF;
            } 
            // fall through
          case 66: break;
          case 24: 
            { return READ;
            } 
            // fall through
          case 67: break;
          case 25: 
            { return SMALLER_OR_EQUAL;
            } 
            // fall through
          case 68: break;
          case 26: 
            { return WRITE;
            } 
            // fall through
          case 69: break;
          case 27: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 70: break;
          case 28: 
            { return OR;
            } 
            // fall through
          case 71: break;
          case 29: 
            { return AND;
            } 
            // fall through
          case 72: break;
          case 30: 
            { return EQUAL;
            } 
            // fall through
          case 73: break;
          case 31: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 74: break;
          case 32: 
            { return INT;
            } 
            // fall through
          case 75: break;
          case 33: 
            { return CIN;
            } 
            // fall through
          case 76: break;
          case 34: 
            { return ELSE;
            } 
            // fall through
          case 77: break;
          case 35: 
            { return TRUE;
            } 
            // fall through
          case 78: break;
          case 36: 
            { return VOID;
            } 
            // fall through
          case 79: break;
          case 37: 
            { return BOOL;
            } 
            // fall through
          case 80: break;
          case 38: 
            { return COUT;
            } 
            // fall through
          case 81: break;
          case 39: 
            { return FALSE;
            } 
            // fall through
          case 82: break;
          case 40: 
            { return WHILE;
            } 
            // fall through
          case 83: break;
          case 41: 
            { return CONST;
            } 
            // fall through
          case 84: break;
          case 42: 
            { return STRING;
            } 
            // fall through
          case 85: break;
          case 43: 
            { return RETURN;
            } 
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
